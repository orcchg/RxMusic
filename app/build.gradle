buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://maven.fabric.io/public" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.fernandocejas.frodo:frodo-plugin:0.8.3"
        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath "io.realm:realm-gradle-plugin:2.3.0"
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
    }
}

repositories {
    maven { url 'http://repo1.maven.org/maven2' }
    maven { url "http://dl.bintray.com/jlmd/maven" }
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://clojars.org/repo/" }  // autovalue-parcel
}

apply plugin: 'com.android.application'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.neenbedankt.android-apt'
//apply plugin: 'io.fabric'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

frodo {
    enabled = true
}

List<String> sngLanguages = ['ba', 'be', 'bg', 'ce', 'cv', 'et',
                             'kk', 'kv', 'lt', 'lv', 'mk', 'os',
                             'pl', 'sah', 'sk', 'sl', 'tt', 'uk'];

String listToJavaArray(List<String> list) {
    String result = "";
    list.each { item -> result += (result.empty ? "" : ",") + "\"${item}\"" }
    return "{${result}}";
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")

        buildConfigField "String[]", "SNG_LANGUAGES", listToJavaArray(sngLanguages)

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            // Some libraries have issues with this.
        disable 'OldTargetApi'              // Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             // For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  // For testing purpose. This is safe to remove.
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-androidannotations.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-butterknife-7.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-glide.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-gson.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-square-okhttp3.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-square-okio.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-project.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-realm.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-retrolambda.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-rx-java.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-square-retrofit2.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-support-v7-appcompat.pro"
            proguardFile "${rootProject.ext.proguardPropertiesPath}/proguard-support-v7-cardview.pro"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        production {
            // default
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res',
                           'src/main/res-screen/music/detail',
                           'src/main/res-screen/music/list']
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

/* Dependencies */
// ------------------------------------------------------------------------------------------------
dependencies {
    /* Development */
    // ------------------------------------------------------------------------
    def developmentDependencies = rootProject.ext.developmentDependencies

    compile developmentDependencies.leakCanary

    compile fileTree(dir: 'libs', include: ['*.jar'])

    /* Presentation */
    // ------------------------------------------------------------------------
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies

    apt presentationDependencies.autoValue
    apt presentationDependencies.butterKnifeCompiler
    apt presentationDependencies.daggerCompiler

    compile presentationDependencies.androidDesign
    compile presentationDependencies.androidSupportV4
    compile presentationDependencies.androidSupportV7
    compile presentationDependencies.androidSupportV13
    compile presentationDependencies.butterKnife
    compile presentationDependencies.cardView
    compile presentationDependencies.circleImageView
    compile presentationDependencies.circleLoadingView
    compile(presentationDependencies.crashlytics) { transitive = true }
    compile presentationDependencies.dagger
    compile presentationDependencies.eventbus
    compile presentationDependencies.expandRecyclerView
    compile presentationDependencies.fillableProgress
    compile presentationDependencies.glide
    compile presentationDependencies.javaxAnnotation
    compile presentationDependencies.javaxInject
    compile(presentationDependencies.materialDrawer) { transitive = true }
    compile presentationDependencies.percentLayout
    compile presentationDependencies.progressbar
    compile presentationDependencies.progressbarCircular
    compile presentationDependencies.recyclerView
    compile presentationDependencies.rxAndroid
    compile presentationDependencies.rxJava
    compile presentationDependencies.showcaseView
    compile presentationDependencies.timber

    provided presentationDependencies.autoValue
    provided presentationDependencies.javaxAnnotation

    // ------------------------------------------
    testCompile presentationTestDependencies.junit

    androidTestCompile(presentationTestDependencies.androidTestRules) {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile(presentationTestDependencies.androidTestRunner) {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile presentationTestDependencies.dexmaker
    androidTestCompile presentationTestDependencies.dexmakerMockito
    androidTestCompile presentationTestDependencies.mockito
    androidTestCompile(presentationTestDependencies.espresso) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile(presentationTestDependencies.espressoContrib) {
        exclude group: 'com.android.support', module: 'design'
        exclude module: 'appcompat-v7'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile(presentationTestDependencies.espressoIntents) {
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile presentationTestDependencies.testingSupportLib

    /* Domain */
    // ------------------------------------------------------------------------
    def domainDependencies = rootProject.ext.domainDependencies
    def domainTestDependencies = rootProject.ext.domainTestDependencies

    apt domainDependencies.autoValue
    apt domainDependencies.autoValueParcel

    compile domainDependencies.gson
    compile domainDependencies.javaxInject
    compile domainDependencies.openCSV
    compile domainDependencies.timber

    provided domainDependencies.autoValue
    provided domainDependencies.javaxAnnotation

    // ------------------------------------------
    apt domainTestDependencies.daggerCompiler

    testCompile domainTestDependencies.dagger
    testCompile domainTestDependencies.junit
    testCompile domainTestDependencies.mockito

    /* Data */
    // ------------------------------------------------------------------------
    def dataDependencies = rootProject.ext.dataDependencies
    def dataTestDependencies = rootProject.ext.dataTestDependencies

    apt dataDependencies.autoValue
    apt dataDependencies.autoValueGson
    apt dataDependencies.daggerCompiler

    compile dataDependencies.androidAnnotations
    compile dataDependencies.glide
    compile dataDependencies.dagger
    compile dataDependencies.javaxAnnotation
    compile dataDependencies.javaxInject
    compile dataDependencies.okHttp
    compile dataDependencies.okHttpLogInterceptor
    compile dataDependencies.retrofit
    compile dataDependencies.retrofitConvertGson
    compile dataDependencies.retrofitAdapterRx
    compile dataDependencies.timber

    provided dataDependencies.autoValue
    provided dataDependencies.autoValueGson
    provided dataDependencies.javaxAnnotation

    // ------------------------------------------
    testCompile dataTestDependencies.assertj
    testCompile dataTestDependencies.junit
    testCompile dataTestDependencies.mockito
    testCompile dataTestDependencies.robolectric

    androidTestCompile(dataTestDependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

/* Tasks */
// ------------------------------------------------------------------------------------------------
/**
 * Performs before every build
 */
android.applicationVariants.all {
    // ------------------------------------------
    /**
     * Copies values-ru/strings.xml to the rest of sng-language resource folders
     */
    variant -> variant.mergeResources.doFirst {
        File tmpResDir = file(buildDir.absolutePath + '/tmp/res')
        if (!tmpResDir.exists()) { tmpResDir.mkdirs() }
        sngLanguages.each { language ->
            File languageDir = file(tmpResDir.absolutePath + "/values-${language}")
            if (!languageDir.exists()) { languageDir.mkdirs() }
            copy {
                from rootDir.absolutePath + '/app/src/main/res-main/values-ru/'
                into languageDir.absolutePath
            }
        }
        android.sourceSets['main'].res.srcDirs += tmpResDir.absolutePath
    }

    // ------------------------------------------
    /**
     * Makes apk-filename for release builds
     */
    def flavor = variant.mergedFlavor;
    if (variant.buildType.name.equals("release")) {
        variant.outputs.each { output ->
            def flavorName = variant.name.replace("Release", "");
            def name = flavorName + "-" + flavor.versionName + "-b" + flavor.versionCode + ".apk";
            output.outputFile = new File(output.outputFile.parent, name);
        }
    } else if (variant.buildType.name.equals("debug")) {
        flavor.versionName += "-" + variant.name + "-b" + flavor.versionCode;
    }
}
